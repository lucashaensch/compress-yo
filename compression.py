#entrada = ""

#print(decode([('a', 5), ('h', 6), ('m', 7), ('u', 1), ('i', 7), ('a', 6)]))

########################################################################################################################
# def decode(lst):
#     q = ""
#     for character, count in lst:
#         q += character * count
#     return q

# def group_letters(input_string):
#     count = 1
#     prev = ''
#     lst = []
#     for character in input_string:
#         if character != prev:
#             if prev:
#                 entry = (prev,count)
#                 lst.append(entry)
#             count = 1
#             prev = character
#         else:
#             count += 1
#     else:
#         entry = (character,count)
#         lst.append(entry)
#     return lst

# def encode_rle(entrada):
# 	compressed_string = ""
# 	for x in group_letters(entrada):
# 		compressed_string = compressed_string + "(" + str(x[1]) + "." + str(x[0]) + ")"
# 	if(len(entrada) > len(compressed_string)):
# 		return compressed_string
# 	else:
# 		return entrada

# teste1 = "aaaaaaaaa33333333333ccccaccccc00000EEEEEEEEEEE"
# teste2 = "aba2a3a4a5a6a7a8"

#print encode_rle(teste1)
#print encode_rle(teste2)
#print group_letters(teste2)

def encode_rle(): # Encoda string inputada
    lst = []
    prev = ''
    count = 1
    output_string = ''
    output_file = open('output.txt','w')

	# Get input string 
    input_file = open('input.txt','r')
    input_string = input_file.read()
    input_file.close()

    for character in input_string:
        if character != prev:
            if prev:
                entry = (prev,count)
                lst.append(entry)
            count = 1
            prev = character
        else:
            count += 1
    else:
        entry = (character,count)
        lst.append(entry)

    # Transforma os grupos na string comprimida
    for group in lst:
    	output_string += str(group[1]) + group[0] + '.'

    # Verifica se vale a pena comprimir e retorna o melhor resultado
    if(len(output_string) > len(input_string)):
		output_file.write(input_string)
		output_file.close()
		return input_string
    else:
		output_file.write(output_string)
		output_file.close()
		return output_string

def decode_rle(input_string): # Decoda string encodada com RLE
	output_string = ''
	pieces = input_string.split(".")
	for piece in pieces:
		if(piece != ''):
			parts = piece.partition(piece[-1])
			output_string += parts[1] * int(parts[0])
	return output_string

### Test-drive ###
encoded_string = encode_rle()

print('\nencoded_string: ' + encoded_string)
print('decoded_string: ' + decode_rle(encoded_string))
